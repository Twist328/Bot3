package bot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.send.SendAnimation;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

public class BotCommandHandler {

    private final AbsSender sender;
    private final WeatherService weatherService = new WeatherService();
    private final CbrService cbrService = new CbrService();

    public BotCommandHandler(AbsSender sender) {
        this.sender = sender;
    }

    public void handle(Update update) throws TelegramApiException {
        if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            handleText(update.getMessage());
        }
    }
    private void sendGif(String chatId, String caption, String gifUrl) throws TelegramApiException {
        SendAnimation gif = SendAnimation.builder()
                .chatId(chatId)
                .caption(caption)
                .animation(new InputFile(gifUrl))
                .build();
        sender.execute(gif);
    }

    private void handleCallback(CallbackQuery callback) throws TelegramApiException {
        String data = callback.getData();
        Message message = callback.getMessage();

        AnswerCallbackQuery ack = AnswerCallbackQuery.builder()
                .callbackQueryId(callback.getId())
                .build();
        sender.execute(ack);

        switch (data) {
            case "START" -> edit(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", InlineKeyboardUtil.getMainMenu());
            case "DATE" -> edit(message, "üìÖ –°–µ–≥–æ–¥–Ω—è: " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")), InlineKeyboardUtil.getMainMenu());
            case "TIME" -> edit(message, "‚è∞ –°–µ–π—á–∞—Å: " + LocalTime.now().withSecond(0).format(DateTimeFormatter.ofPattern("HH:mm")), InlineKeyboardUtil.getMainMenu());
            case "HELP" -> edit(message, "üÜò –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å:\n‚Äî –ü–æ–≥–æ–¥—É üå¶\n‚Äî –î–∞—Ç—É üìÖ\n‚Äî –í—Ä–µ–º—è ‚è∞\n‚Äî –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí± –æ—Ç –¶–ë –†–§", InlineKeyboardUtil.getMainMenu());
            case "WEATHER" -> edit(message, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):", InlineKeyboardUtil.getMainMenu());
            case "CBR" -> edit(message, cbrService.getRates(), InlineKeyboardUtil.getMainMenu());
            default -> edit(message, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", InlineKeyboardUtil.getMainMenu());
        }
    }

    private void handleText(Message message) throws TelegramApiException {
        String text = message.getText().trim();
        String chatId = message.getChatId().toString();

        if (text.startsWith("/start")) {
            send(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", InlineKeyboardUtil.getMainMenu());
            String gifUrl = weatherService.getGifForIcon();
            if (gifUrl != null) {
                sendGif(chatId, "üå§ –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ:", gifUrl);
            }

        } else {
            String reply = weatherService.getWeatherByCity(text);
            send(chatId, reply, InlineKeyboardUtil.getMainMenu());
        }
    }

    private void send(String chatId, String text, InlineKeyboardMarkup markup) throws TelegramApiException {
        SendMessage msg = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(markup)
                .build();
        sender.execute(msg);
    }

    private void edit(Message message, String text, InlineKeyboardMarkup markup) throws TelegramApiException {
        EditMessageText editMessage = EditMessageText.builder()
                .chatId(message.getChatId().toString())
                .messageId(message.getMessageId())
                .text(text)
                .replyMarkup(markup)
                .build();
        sender.execute(editMessage);
    }
}